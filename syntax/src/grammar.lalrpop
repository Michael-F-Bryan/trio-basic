use codespan::{ByteIndex, Span};
use crate::{
    lexer::LexError,
    ast::{
        Ident, Literal, FunctionCall, Expr, Label, Line, Assignment, Dim, File, 
        BinaryOp, Operator, Statement,
    },
    tokens::Token,
};

grammar<'input>;

pub File: File = {
    "eol" <File> => <>,
    <l:@L> <lines:Line+> <r:@R> => File::new(lines, Span::new(l, r)),
    <l:@L> "eol" <r:@R> => File::new(Vec::new(), Span::new(l, r)),
};

pub Line: Line = {
    <l:Label> "eol"+ => l.into(),
    <a:Assignment> "eol"+ => a.into(),
    <d:Dim> "eol"+ => d.into(),
    <f:FunctionCall> "eol"+ => f.into(),
    <s:Statement> "eol"+ => s.into(),
};

Statement: Statement = {
    Stmt<"print">,
    Stmt<"goto">,
};

Stmt<T>: Statement = {
    <l:@L> <p:T> <args:Comma<Expr>> <r:@R> => Statement::new(p.as_str().unwrap(), args, Span::new(l, r)),
};

pub(crate) Label: Label = {
    <l:@L> <n:"ident"> ":" <r:@R> => Label::new(n.as_ident().unwrap(), Span::new(l, r)),
}

pub(crate) Assignment: Assignment = {
    <l:@L> <n:Ident> "=" <v:Expr> <r:@R> => Assignment::new(n, v, Span::new(l, r)),
}

pub(crate) Dim: Dim = {
    <l:@L> "dim" <n:Ident> "as" <t:Ident> <r:@R> => Dim::new(n, t, Span::new(l, r)),
}

pub Expr: Expr = {
    <l:@L> <left:Expr> "+" <right:Term> <r:@R> => Expr::BinaryOp(BinaryOp::new(left, right, Operator::Add, Span::new(l, r))),
    <Term> => <>,
};

Term: Expr = {
    <l:@L> <left:Term> "*" <right:Factor> <r:@R> => Expr::BinaryOp(BinaryOp::new(left, right, Operator::Multiply, Span::new(l, r))),
    <Factor> => <>,

};

Factor: Expr = {
    <Ident> => Expr::Ident(<>),
    <Literal> => Expr::Literal(<>),
    <FunctionCall> => Expr::FunctionCall(<>),
    "(" <Expr> ")" => <>,
};

pub Literal: Literal = {
    <l:@L> <i:"int"> <r:@R> => Literal::new(i.as_int().unwrap(), Span::new(l, r)),
    <l:@L> <i:"float"> <r:@R> => Literal::new(i.as_float().unwrap(), Span::new(l, r)),
    <l:@L> <i:"string"> <r:@R> => Literal::new(i.as_str().unwrap(), Span::new(l, r)),
};

pub(crate) Ident: Ident = {
    <l:@L> <id:"ident"> <r:@R> => Ident::new(id.as_ident().unwrap(), Span::new(l, r)),
};

pub(crate) FunctionCall: FunctionCall = {
    <l:@L> <name:Ident> "(" <args:Comma<Expr>> ")" <r:@R> => FunctionCall::new(name, args, Span::new(l, r)),
};

Comma<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e { 
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

extern {
    type Location = ByteIndex;
    type Error = LexError;

    enum Token<'input> {
        "eol" => Token::EndOfLine,
        "ident" => Token::Identifier(_),
        "int" => Token::Integer(_),
        "float" => Token::Float(_),
        "string" => Token::String(_),
        "print" => Token::Print,
        "goto" => Token::Goto,
        "dim" => Token::Dim,
        "as" => Token::As,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
        "," => Token::Comma,
        ":" => Token::Colon,
        "=" => Token::Equals,
        "+" => Token::Plus,
        "*" => Token::Asterisk,
        "-" => Token::Minus,
    }
}